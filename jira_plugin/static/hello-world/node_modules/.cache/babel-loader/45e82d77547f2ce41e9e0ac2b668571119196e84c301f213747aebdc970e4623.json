{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blobToBase64 = exports.base64ToBlob = void 0;\nvar base64ToBlob = function base64ToBlob(b64string, mimeType) {\n  if (!b64string) {\n    return null;\n  }\n  var base64Data = b64string.includes(';base64') ? b64string.split(',')[1] : b64string;\n  var byteCharacters = atob(base64Data);\n  var byteNumbers = new Array(byteCharacters.length);\n  for (var i = 0; i < byteCharacters.length; i++) {\n    byteNumbers[i] = byteCharacters.charCodeAt(i);\n  }\n  var byteArray = new Uint8Array(byteNumbers);\n  return new Blob([byteArray], {\n    type: mimeType\n  });\n};\nexports.base64ToBlob = base64ToBlob;\nvar blobToBase64 = function blobToBase64(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.onloadend = function () {\n      resolve(reader.result);\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n};\nexports.blobToBase64 = blobToBase64;","map":{"version":3,"names":["Object","defineProperty","exports","value","blobToBase64","base64ToBlob","b64string","mimeType","base64Data","includes","split","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","Blob","type","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL"],"sources":["G:/Personal_projects/ai_jira_assistant/jira_plugin/static/hello-world/node_modules/@forge/bridge/out/utils/blobParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blobToBase64 = exports.base64ToBlob = void 0;\nconst base64ToBlob = (b64string, mimeType) => {\n    if (!b64string) {\n        return null;\n    }\n    const base64Data = b64string.includes(';base64') ? b64string.split(',')[1] : b64string;\n    const byteCharacters = atob(base64Data);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n        byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    return new Blob([byteArray], { type: mimeType });\n};\nexports.base64ToBlob = base64ToBlob;\nconst blobToBase64 = (blob) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            resolve(reader.result);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n};\nexports.blobToBase64 = blobToBase64;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAGF,OAAO,CAACG,YAAY,GAAG,KAAK,CAAC;AACpD,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,SAAS,EAAEC,QAAQ,EAAK;EAC1C,IAAI,CAACD,SAAS,EAAE;IACZ,OAAO,IAAI;EACf;EACA,IAAME,UAAU,GAAGF,SAAS,CAACG,QAAQ,CAAC,SAAS,CAAC,GAAGH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGJ,SAAS;EACtF,IAAMK,cAAc,GAAGC,IAAI,CAACJ,UAAU,CAAC;EACvC,IAAMK,WAAW,GAAG,IAAIC,KAAK,CAACH,cAAc,CAACI,MAAM,CAAC;EACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC5CH,WAAW,CAACG,CAAC,CAAC,GAAGL,cAAc,CAACM,UAAU,CAACD,CAAC,CAAC;EACjD;EACA,IAAME,SAAS,GAAG,IAAIC,UAAU,CAACN,WAAW,CAAC;EAC7C,OAAO,IAAIO,IAAI,CAAC,CAACF,SAAS,CAAC,EAAE;IAAEG,IAAI,EAAEd;EAAS,CAAC,CAAC;AACpD,CAAC;AACDL,OAAO,CAACG,YAAY,GAAGA,YAAY;AACnC,IAAMD,YAAY,GAAG,SAAfA,YAAYA,CAAIkB,IAAI,EAAK;EAC3B,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACpC,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,SAAS,GAAG,YAAM;MACrBJ,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;IAC1B,CAAC;IACDH,MAAM,CAACI,OAAO,GAAGL,MAAM;IACvBC,MAAM,CAACK,aAAa,CAACT,IAAI,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC;AACDpB,OAAO,CAACE,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}