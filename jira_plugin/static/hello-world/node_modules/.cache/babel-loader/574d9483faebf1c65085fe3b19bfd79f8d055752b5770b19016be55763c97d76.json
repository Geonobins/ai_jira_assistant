{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"G:/Personal_projects/ai_jira_assistant/jira_plugin/static/hello-world/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureLocale = void 0;\nvar constants_1 = require(\"./constants\");\nvar forgeSupportedLocaleCodesSet = new Set(constants_1.FORGE_SUPPORTED_LOCALE_CODES);\nvar localeFallbacks = {\n  'en-UK': 'en-GB',\n  'nb-NO': 'no-NO'\n};\nvar languageToLocaleCodeMap = constants_1.FORGE_SUPPORTED_LOCALE_CODES.reduce(function (agg, code) {\n  var _code$split = code.split('-'),\n    _code$split2 = _slicedToArray(_code$split, 1),\n    lng = _code$split2[0];\n  if (!agg[lng]) {\n    agg[lng] = code;\n  }\n  return agg;\n}, {\n  nb: 'no-NO',\n  pt: 'pt-PT'\n});\nvar ensureLocale = function ensureLocale(rawLocale) {\n  var _ref, _languageToLocaleCode;\n  var locale = rawLocale.replace('_', '-');\n  if (forgeSupportedLocaleCodesSet.has(locale)) {\n    return locale;\n  }\n  return (_ref = (_languageToLocaleCode = languageToLocaleCodeMap[locale]) !== null && _languageToLocaleCode !== void 0 ? _languageToLocaleCode : localeFallbacks[locale]) !== null && _ref !== void 0 ? _ref : null;\n};\nexports.ensureLocale = ensureLocale;","map":{"version":3,"names":["_slicedToArray","require","default","Object","defineProperty","exports","value","ensureLocale","constants_1","forgeSupportedLocaleCodesSet","Set","FORGE_SUPPORTED_LOCALE_CODES","localeFallbacks","languageToLocaleCodeMap","reduce","agg","code","_code$split","split","_code$split2","lng","nb","pt","rawLocale","_ref","_languageToLocaleCode","locale","replace","has"],"sources":["G:/Personal_projects/ai_jira_assistant/jira_plugin/static/hello-world/node_modules/@forge/i18n/out/ensureLocale.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ensureLocale = void 0;\nconst constants_1 = require(\"./constants\");\nconst forgeSupportedLocaleCodesSet = new Set(constants_1.FORGE_SUPPORTED_LOCALE_CODES);\nconst localeFallbacks = {\n    'en-UK': 'en-GB',\n    'nb-NO': 'no-NO'\n};\nconst languageToLocaleCodeMap = constants_1.FORGE_SUPPORTED_LOCALE_CODES.reduce((agg, code) => {\n    const [lng] = code.split('-');\n    if (!agg[lng]) {\n        agg[lng] = code;\n    }\n    return agg;\n}, {\n    nb: 'no-NO',\n    pt: 'pt-PT'\n});\nconst ensureLocale = (rawLocale) => {\n    const locale = rawLocale.replace('_', '-');\n    if (forgeSupportedLocaleCodesSet.has(locale)) {\n        return locale;\n    }\n    return languageToLocaleCodeMap[locale] ?? localeFallbacks[locale] ?? null;\n};\nexports.ensureLocale = ensureLocale;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,cAAA,GAAAC,OAAA,+HAAAC,OAAA;AACbC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,IAAMC,WAAW,GAAGP,OAAO,CAAC,aAAa,CAAC;AAC1C,IAAMQ,4BAA4B,GAAG,IAAIC,GAAG,CAACF,WAAW,CAACG,4BAA4B,CAAC;AACtF,IAAMC,eAAe,GAAG;EACpB,OAAO,EAAE,OAAO;EAChB,OAAO,EAAE;AACb,CAAC;AACD,IAAMC,uBAAuB,GAAGL,WAAW,CAACG,4BAA4B,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI,EAAK;EAC3F,IAAAC,WAAA,GAAcD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;IAAAC,YAAA,GAAAnB,cAAA,CAAAiB,WAAA;IAAtBG,GAAG,GAAAD,YAAA;EACV,IAAI,CAACJ,GAAG,CAACK,GAAG,CAAC,EAAE;IACXL,GAAG,CAACK,GAAG,CAAC,GAAGJ,IAAI;EACnB;EACA,OAAOD,GAAG;AACd,CAAC,EAAE;EACCM,EAAE,EAAE,OAAO;EACXC,EAAE,EAAE;AACR,CAAC,CAAC;AACF,IAAMf,YAAY,GAAG,SAAfA,YAAYA,CAAIgB,SAAS,EAAK;EAAA,IAAAC,IAAA,EAAAC,qBAAA;EAChC,IAAMC,MAAM,GAAGH,SAAS,CAACI,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;EAC1C,IAAIlB,4BAA4B,CAACmB,GAAG,CAACF,MAAM,CAAC,EAAE;IAC1C,OAAOA,MAAM;EACjB;EACA,QAAAF,IAAA,IAAAC,qBAAA,GAAOZ,uBAAuB,CAACa,MAAM,CAAC,cAAAD,qBAAA,cAAAA,qBAAA,GAAIb,eAAe,CAACc,MAAM,CAAC,cAAAF,IAAA,cAAAA,IAAA,GAAI,IAAI;AAC7E,CAAC;AACDnB,OAAO,CAACE,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}